/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

/**
 *
 * @author jh599
 */

import dominio.Producto;
import dominio.Usuario;
import dominio.DetalleVenta;
import servicio.ProductoServicio;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import dominio.Venta;  
import servicio.VentaServicio;

public class gui_registro_venta extends javax.swing.JFrame {

    /**
     * Creates new form gui_registro_venta
     */
    
    private Usuario usuarioLogueado;
    private ProductoServicio productoService;
    private VentaServicio ventaService;
    
    public gui_registro_venta(Usuario usuarioLogueado1) {
       this.usuarioLogueado = usuarioLogueado1;
    this.productoService = new ProductoServicio();
    this.ventaService = new VentaServicio();
    
    initComponents();
    inicializarComponentes();
    setLocationRelativeTo(null);
    }
    
     private void inicializarComponentes() {
    jSpinnerCantidad.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
    lblSubtotal.setText("Subtotal: $0.00");
    lblIva7.setText("IVA (7%): $0.00");
    lblIVI3.setText("IVI (13%): $0.00");
    lblDescuento.setText("Descuento: $0.00");
    lblTotal.setText("Total: $0.00");
}
       
private void actualizarTotales() {
        double subtotal = 0;        
        
        // Calcular subtotal desde la tabla
        DefaultTableModel modelo = (DefaultTableModel) tblDetalles.getModel();
        for (int i = 0; i < modelo.getRowCount(); i++) {
            try {
                double totalLinea = Double.parseDouble(modelo.getValueAt(i, 3).toString());
                subtotal += totalLinea;
            } catch (NumberFormatException e) {
                // Ignorar filas con errores
            }
        }
        
        // Calcular impuestos
        double iva = subtotal * 0.07;    // 7%
        double ivi = subtotal * 0.13;    // 13%
        double descuento = 0;
        
        if (jCheckBoxDescuento.isSelected()) {  
            try {
                descuento = Double.parseDouble(lblDescuento.getText().replace("Descuento: $", ""));
            } catch (NumberFormatException e) {
                descuento = 0;
            }
        }
        
        double total = subtotal + iva + ivi - descuento;
        
        // Actualizar etiquetas
        lblSubtotal.setText("Subtotal: $" + String.format("%.2f", subtotal));
        lblIva7.setText("IVA (7%): $" + String.format("%.2f", iva));
        lblIVI3.setText("IVI (13%): $" + String.format("%.2f", ivi));
        lblDescuento.setText("Descuento: $" + String.format("%.2f", descuento));
        lblTotal.setText("Total: $" + String.format("%.2f", total));
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblBuscarNombre = new javax.swing.JLabel();
        txtBuscarNombre = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDetalles = new javax.swing.JTable();
        jSpinnerCantidad = new javax.swing.JSpinner();
        jCheckBoxDescuento = new javax.swing.JCheckBox();
        lblSubtotal = new javax.swing.JLabel();
        lblIva7 = new javax.swing.JLabel();
        lblIVI3 = new javax.swing.JLabel();
        lblDescuento = new javax.swing.JLabel();
        lblTotal = new javax.swing.JLabel();
        btnFinalizarVenta = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnNuevoItem = new javax.swing.JButton();
        btnVolver = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblBuscarNombre.setText("Buscar producto por nombre: ");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        tblDetalles.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
            },
            new String [] {
                "Producto", "Cantidad", "Precio", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblDetalles);

        jCheckBoxDescuento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxDescuentoActionPerformed(evt);
            }
        });

        lblSubtotal.setText("Subtotal: $X.XX");

        lblIva7.setText("IVA (7%): $X.XX");

        lblIVI3.setText("IVI (13%): $X.XX");

        lblDescuento.setText("Descuento: $X.XX");

        lblTotal.setText("Total: $X.XX");

        btnFinalizarVenta.setText("Finalizar venta");
        btnFinalizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarVentaActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnNuevoItem.setText("Nuevo Ã­tem");
        btnNuevoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoItemActionPerformed(evt);
            }
        });

        btnVolver.setText("Volver");
        btnVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblSubtotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDescuento, javax.swing.GroupLayout.DEFAULT_SIZE, 117, Short.MAX_VALUE)
                    .addComponent(lblIVI3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblIva7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 30, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(lblBuscarNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAgregar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSpinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBoxDescuento))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(174, 174, 174)
                        .addComponent(btnFinalizarVenta)
                        .addGap(44, 44, 44)
                        .addComponent(btnCancelar)
                        .addGap(54, 54, 54)
                        .addComponent(btnNuevoItem)
                        .addGap(40, 40, 40)
                        .addComponent(btnVolver)))
                .addContainerGap(166, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblBuscarNombre)
                    .addComponent(txtBuscarNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar)
                    .addComponent(jSpinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBoxDescuento))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(lblSubtotal)
                        .addGap(18, 18, 18)
                        .addComponent(lblIva7)
                        .addGap(18, 18, 18)
                        .addComponent(lblIVI3)
                        .addGap(18, 18, 18)
                        .addComponent(lblDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblTotal))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFinalizarVenta)
                    .addComponent(btnCancelar)
                    .addComponent(btnNuevoItem)
                    .addComponent(btnVolver))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
  String nombreBuscado = txtBuscarNombre.getText().trim();
    System.out.println("ð Buscando: '" + nombreBuscado + "'");
    
    if (nombreBuscado.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Ingrese el nombre del producto.");
        return;
    }
    
    try {
        Producto producto = productoService.buscarPorNombre(nombreBuscado);
        
        if (producto == null || !producto.isActivo()) {
            JOptionPane.showMessageDialog(this, "Producto no encontrado o inactivo.");
            return;
        }
        
        int cantidad = (Integer) jSpinnerCantidad.getValue();
        double totalLinea = cantidad * producto.getPrecioUnitario();
        
        DefaultTableModel modelo = (DefaultTableModel) tblDetalles.getModel();
        Object[] fila = {
            producto.getNombre(),
            cantidad,
            String.format("%.2f", producto.getPrecioUnitario()),
            String.format("%.2f", totalLinea)
        };
        modelo.addRow(fila);
        
        // â Forzar actualizaciÃ³n visual
        tblDetalles.revalidate();
        tblDetalles.repaint();
        
        actualizarTotales();
        
        txtBuscarNombre.setText("");
        jSpinnerCantidad.setValue(1);
        txtBuscarNombre.requestFocus();
        
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Error al buscar producto: " + e.getMessage());
        e.printStackTrace();
    }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void jCheckBoxDescuentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxDescuentoActionPerformed
        if (jCheckBoxDescuento.isSelected()) {
            String descuentoStr = JOptionPane.showInputDialog(this, "Ingrese monto de descuento:");
            try {
                double descuento = Double.parseDouble(descuentoStr);
                if (descuento < 0) {
                    JOptionPane.showMessageDialog(this, "Descuento no puede ser negativo.");
                    jCheckBoxDescuento.setSelected(false);
                    return;
                }
                lblDescuento.setText(String.format("%.2f", descuento));
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Monto invÃ¡lido.");
                jCheckBoxDescuento.setSelected(false);
            }
        } else {
            lblDescuento.setText("0.00");
        }
        actualizarTotales();
    }//GEN-LAST:event_jCheckBoxDescuentoActionPerformed

    private void btnFinalizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarVentaActionPerformed
    if (tblDetalles.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "Agregue al menos un producto.");
            return;
        }
    
        
        try {
            // Crear lista de detalles desde la tabla
            List<DetalleVenta> detalles = new ArrayList<>();
             DefaultTableModel modelo = (DefaultTableModel) tblDetalles.getModel();
    System.out.println("ð Filas en tabla al finalizar: " + modelo.getRowCount());
    
    if (modelo.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "Agregue al menos un producto.");
        return;
    }
            for (int i = 0; i < modelo.getRowCount(); i++) {
                String nombreProd = modelo.getValueAt(i, 0).toString();
                int cantidad = Integer.parseInt(modelo.getValueAt(i, 1).toString());
                double precioUnit = Double.parseDouble(modelo.getValueAt(i, 2).toString());
                double totalLinea = Double.parseDouble(modelo.getValueAt(i, 3).toString());
                
                // Buscar producto por nombre
                Producto producto = productoService.buscarPorNombre(nombreProd);
                
                if (producto != null) {
                    DetalleVenta detalle = new DetalleVenta(
                        0, null, producto, cantidad, precioUnit, totalLinea
                    );
                    detalles.add(detalle);
                }
            }
            
            double descuento = 0;
            if (jCheckBoxDescuento.isSelected()) {
                try {
                    descuento = Double.parseDouble(lblDescuento.getText());
                } catch (NumberFormatException e) {
                    descuento = 0;
                }
            }
            
            // Registrar venta
            Venta ventaRegistrada = ventaService.registrarVenta(usuarioLogueado, detalles, descuento);
            
            JOptionPane.showMessageDialog(this, "â Venta #" + ventaRegistrada.getId() + " registrada con Ã©xito.");
            
            // Limpiar todo
            modelo.setRowCount(0);
            lblDescuento.setText("0.00");
            jCheckBoxDescuento.setSelected(false);
            actualizarTotales();
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al registrar venta: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnFinalizarVentaActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
       DefaultTableModel modelo = (DefaultTableModel) tblDetalles.getModel();
        modelo.setRowCount(0);
        lblDescuento.setText("0.00");
        jCheckBoxDescuento.setSelected(false);
        actualizarTotales();
        JOptionPane.showMessageDialog(this, "Venta cancelada.");
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnNuevoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoItemActionPerformed
       txtBuscarNombre.setText("");
        jSpinnerCantidad.setValue(1);
        txtBuscarNombre.requestFocus();
    }//GEN-LAST:event_btnNuevoItemActionPerformed

    private void btnVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVolverActionPerformed
      gui_principal gui_prin = new gui_principal(usuarioLogueado); 
    gui_prin.setVisible(true);
    this.dispose();
    }//GEN-LAST:event_btnVolverActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnFinalizarVenta;
    private javax.swing.JButton btnNuevoItem;
    private javax.swing.JButton btnVolver;
    private javax.swing.JCheckBox jCheckBoxDescuento;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerCantidad;
    private javax.swing.JLabel lblBuscarNombre;
    private javax.swing.JLabel lblDescuento;
    private javax.swing.JLabel lblIVI3;
    private javax.swing.JLabel lblIva7;
    private javax.swing.JLabel lblSubtotal;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JTable tblDetalles;
    private javax.swing.JTextField txtBuscarNombre;
    // End of variables declaration//GEN-END:variables
}
